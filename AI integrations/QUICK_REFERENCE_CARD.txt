# Quick Reference Card - NithModulePhone Fix

## What You Have Now

```
PHONE SENSOR PROTECTION (Applied in DefaultSetup.cs)
??? Rate Limiting (Receiver)
?   ??? MaxSamplesPerSecond = 60 Hz
??? Async Queue (Module)
?   ??? MaxQueueSize = 20 samples
?   ??? OverflowBehavior = DropOldest
??? ALL OTHER SENSORS protected the same way
```

## Your Settings

| Component | Setting | Effect |
|-----------|---------|--------|
| Phone Receiver | 60 Hz limit | Blocks at 60 Hz |
| Phone Module | 20 buffer | Absorbs bursts |
| Eye Tracker | 100 Hz limit | Fastest |
| Head Tracker | 60 Hz limit | Medium |
| Webcam | 30 Hz limit | Slowest |

## Testing

**Add monitoring to see what's happening:**

```csharp
// Copy from: HeadBower/DIAGNOSTICS_MONITORING_CODE.cs
// Paste into: MainWindow.xaml.cs
// Shows queue depth and drops every 5 seconds
```

## If Still Lagging

```csharp
// Make these changes in DefaultSetup.cs:
Rack.UDPreceiverPhone.MaxSamplesPerSecond = 30;  // Lower than 60
Rack.NithModulePhone.MaxQueueSize = 10;          // Smaller than 20
// Recompile and test
```

## If Losing Data

```csharp
Rack.UDPreceiverPhone.MaxSamplesPerSecond = 100; // Higher than 60
Rack.NithModulePhone.MaxQueueSize = 50;          // Larger than 20
// Recompile and test
```

## Expected Diagnostics (Healthy)

```
?? PHONE Sensor:
   Queue: 2/20 samples
   Dropped (receiver): 0
   Dropped (module): 0
```

## Expected Diagnostics (Needs Tuning)

```
?? PHONE Sensor:
   Queue: 18/20 samples       ? Too full!
   Dropped (receiver): 50+    ? Reduce rate or increase buffer
   Dropped (module): 30+      ? Same fix
```

## Files

- **Modified:** `Modules/DefaultSetup.cs` - Applied the settings
- **Core Logic:** `NITHlibrary/Nith/Module/NithModule.cs` - Async processing
- **Rate Limit:** `NITHlibrary/Tools/Ports/UDPreceiver.cs` - Rate limiting
- **Guides:** 
  - `PHONE_SENSOR_FIX_GUIDE.md` - Troubleshooting
  - `DIAGNOSTICS_MONITORING_CODE.cs` - Copy-paste monitoring
  - `NITHMODULEPHONE_FIX_COMPLETE.md` - Full guide

## Tuning Table

| Problem | Adjust | New Value |
|---------|--------|-----------|
| Lag/Freeze | Rate Limit ? | 30 Hz |
| Lag/Freeze | Queue Size ? | 10 |
| Data Loss | Rate Limit ? | 100 Hz |
| Data Loss | Queue Size ? | 50 |

## Key Takeaway

? **Everything is automatic now**  
- Rate limiting kicks in at 60 Hz automatically
- Async queue handles bursts automatically  
- Diagnostics show if tuning needed
- App stays responsive even at 200+ Hz input

**Just run it and it should work!**

If it doesn't, check diagnostics ? adjust settings ? repeat.

---

## Glossary

- **Rate Limiting** - Discard samples if coming too fast
- **Queue Depth** - How many samples waiting to process (0-20)
- **Dropped (receiver)** - Samples discarded by rate limiter
- **Dropped (module)** - Samples discarded when queue full
- **DropOldest** - Remove oldest sample when queue full (real-time)
- **DropNewest** - Remove newest sample (preserve history)
- **Async Processing** - Process on background thread (doesn't block UI)

---

**Bottom Line:** Your phone sensor is now protected against lag/crashes. Test it!
